[
    {
        "question": "What is cors?",
        "answer": "CORS stands for Cross-Origin Resource Sharing. It is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources. CORS also relies on a mechanism by which browsers make a 'preflight' request to the server hosting the cross-origin resource, in order to check that the server will permit the actual request. In that preflight, the browser sends headers that indicate the HTTP method and headers that will be used in the actual request."
    },
    {
        "question": "Why are you using firebase? What other options do you have to implement authentication?",
        "answer": [
            {
                "heading": "Reason of using firebase:",
                "article": "Firebase is a third-party authentication system provider by Google. As they are a giant company in technology, they can handle privacy and security issues in a better way than us. Also google is a reputed and trusted company and firebase is free for a limited number of projects, that's why we are using firebase for the time being."
            },
            {
                "heading": "Alternatives for firebase:",
                "article": "Auth0, MongoDB, Passport, Okta, JSON Web Token, KeyCloak, Amazon Cognito"
            }
        ]
    },
    {
        "question": "How does the private route work?",
        "answer": "Private Routes in React Router require a user being authorized to visit a route. So if a user is not authorized for a specific page, they cannot access it. The most common example is authentication in a React application where a user can only access the protected pages when they are authorized (which means in this case being authenticated). For example, we can set a protected route's condition is user must to be logged in. Otherwise, the route will redirect to login page automatically."
    },
    {
        "question": "What is Node? How does Node work?",
        "answer": "Node.js is a JavaScript runtime environment that achieves low latency and high throughput by taking a “non-blocking” approach to serving requests. In other words, Node.js wastes no time or resources on waiting for I/O requests to return. Node.js accepts the request from the clients and sends the response, while working with the request node.js handles them with a single thread. To operate I/O operations or requests node.js use the concept of threads. Thread is a sequence of instructions that the server needs to perform. It runs parallel on the server to provide the information to multiple clients. Node.js is an event loop single-threaded language. It can handle concurrent requests with a single thread without blocking it for one request."
    }
]